{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/luis-cabrera/app-breaking-bad/src/App.js\",\n    _s = $RefreshSig$();\n\n// ahora realiceremos la peticion a la api para que nuestro state quote se carge la primera vez desde la api\n// haremos la llmada a la api para la primera vez que se renderice el componente\n//  y el hook que nos permmite hacer esta tarea es el useEffect\nimport { useState, useEffect } from \"react\";\nimport { Quote } from \"./componetes/Quote\"; // nuestro estado quote tendra 2  parametros\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialQuote = {\n  text: 'Quote',\n  author: 'Author'\n};\n\nfunction App() {\n  _s();\n\n  // const [stateinicial, estadoActual]= useState(llama al estdo inicial)\n  const [quote, setQuote] = useState(initialQuote); // debemos crear esta initialQuote la creamo como un arreglo\n  // como useEfect no acepta funciones asincronas lo haremos fuera del efecto entonces creamos aca el proceso\n  // creamos una fiuncion updateQuota que ejecutara la llamada a nuestra api y relizara la actaulizacion de nuestro estado\n\n  const updateQuote = async () => {\n    const url = 'https://www.breakingbadapi.com/api/quote/random';\n    const res = await fetch(url); // para utilizar la data \n    // const data = await res.json()\n\n    const [newQuote] = await res.json(); //console.log(data[0])//esto mismo lo podemos hacer desestructurando la informacion que contiene el data\n    //y podemos decir que lo que hay en la posicion 0 asignale una variable por ejemplo newQuote\n    // ver arriba de console.log como quedaria\n    // imprimamos nuevamente\n\n    console.log(newQuote);\n  }; // para usar useEffect lo llamamos aca , le pasamos una funcion o callback que se ejecutara cuando algun parametro de nuestro arreglo de dependencias cambie\n\n\n  useEffect(() => {\n    //luego de crear  updateQuote lo pasamos aca\n    // nuestro useEffect deberia quedar asi\n    //  pero como el useEffect NO  acepta funciones asincronas en el argumento por ello lo hacemos afuera el proceso\n    // useEffect(async () => {\n    //   const url = 'https//: www.breakingbadapi.com/api/quote/random'// hacemos la peticion a la api, creamos una cte que almacene la url donde haremos la peticion\n    //  // necesitaremos hacer un fetch y diremos el response es igual a la url, es decir que esta respuesta sera igual a lo que se ontenga de la url\n    //  // esto es un proceso asincrono y para usar una variable que tiene un proceso asincrono usamos await\n    //   const res = await fetch(url)\n    // entonces aca llamamos a la funcion que creamos afuera como dejamos nuestro arreglo vacio esta actualizacion se ejecuta la primera vez que se actualizae el componente\n    updateQuote(); // esto nos muestra un arreglo que en su primera posicion tiene un objeto\n    //para sacarl al objeto  del arreglo y solo mostrar solo el objeto le pasamos a nuestra funcion la posocion[0] en el console.log que estamos mostrando\n  }, []); //en este caso no tendremos ninguna dependencia que estar escuchando , dejamos este arreglo vacio con el objetivo qu ela funcion se ejecute la primera ves\n  // que se renderiza el componente y no se vuelva a ejecutar  \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://upload.wikimedia.org/wikipedia/commons/7/77/Breaking_Bad_logo.svg\",\n      alt: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Get Another\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Quote, {\n      quote: quote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"L4WiA/vSk81lQ+5xPRWwyYGYB3g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Quote","initialQuote","text","author","App","quote","setQuote","updateQuote","url","res","fetch","newQuote","json","console","log"],"sources":["/Users/viviana/Desktop/ejercicios/luis-cabrera/app-breaking-bad/src/App.js"],"sourcesContent":["\n// ahora realiceremos la peticion a la api para que nuestro state quote se carge la primera vez desde la api\n// haremos la llmada a la api para la primera vez que se renderice el componente\n//  y el hook que nos permmite hacer esta tarea es el useEffect\n\nimport { useState, useEffect } from \"react\";\nimport { Quote } from \"./componetes/Quote\";\n\n\n// nuestro estado quote tendra 2  parametros\nconst initialQuote = {\n  text: 'Quote',\n  author: 'Author'\n}\n\nfunction App() {\n  // const [stateinicial, estadoActual]= useState(llama al estdo inicial)\n  const [quote, setQuote] = useState(initialQuote) // debemos crear esta initialQuote la creamo como un arreglo\n\n\n  // como useEfect no acepta funciones asincronas lo haremos fuera del efecto entonces creamos aca el proceso\n  // creamos una fiuncion updateQuota que ejecutara la llamada a nuestra api y relizara la actaulizacion de nuestro estado\n  const updateQuote = async () => {\n    const url = 'https://www.breakingbadapi.com/api/quote/random'\n    const res = await fetch(url)\n    // para utilizar la data \n    // const data = await res.json()\n    const [newQuote] = await res.json()\n    //console.log(data[0])//esto mismo lo podemos hacer desestructurando la informacion que contiene el data\n    //y podemos decir que lo que hay en la posicion 0 asignale una variable por ejemplo newQuote\n    // ver arriba de console.log como quedaria\n    // imprimamos nuevamente\n    console.log(newQuote)\n  }\n\n  // para usar useEffect lo llamamos aca , le pasamos una funcion o callback que se ejecutara cuando algun parametro de nuestro arreglo de dependencias cambie\n  useEffect(() => {\n\n    //luego de crear  updateQuote lo pasamos aca\n\n\n    // nuestro useEffect deberia quedar asi\n    //  pero como el useEffect NO  acepta funciones asincronas en el argumento por ello lo hacemos afuera el proceso\n    // useEffect(async () => {\n    //   const url = 'https//: www.breakingbadapi.com/api/quote/random'// hacemos la peticion a la api, creamos una cte que almacene la url donde haremos la peticion\n\n    //  // necesitaremos hacer un fetch y diremos el response es igual a la url, es decir que esta respuesta sera igual a lo que se ontenga de la url\n    //  // esto es un proceso asincrono y para usar una variable que tiene un proceso asincrono usamos await\n    //   const res = await fetch(url)\n\n    // entonces aca llamamos a la funcion que creamos afuera como dejamos nuestro arreglo vacio esta actualizacion se ejecuta la primera vez que se actualizae el componente\n    updateQuote()\n    // esto nos muestra un arreglo que en su primera posicion tiene un objeto\n    //para sacarl al objeto  del arreglo y solo mostrar solo el objeto le pasamos a nuestra funcion la posocion[0] en el console.log que estamos mostrando\n\n  }, []) //en este caso no tendremos ninguna dependencia que estar escuchando , dejamos este arreglo vacio con el objetivo qu ela funcion se ejecute la primera ves\n  // que se renderiza el componente y no se vuelva a ejecutar  \n\n  return (\n    <div className=\"app\">\n      <img\n        src=\"https://upload.wikimedia.org/wikipedia/commons/7/77/Breaking_Bad_logo.svg\"\n        alt=\"logo\"\n      />\n      <button>Get Another</button>\n\n      {/* le decimos al componente : recibe un quote que tiene el valor de nuestro estado quote  para enviarlo a quote.js*/}\n      <Quote quote={quote} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AACA;AACA;AACA;AAEA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,KAAT,QAAsB,oBAAtB,C,CAGA;;;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,OADa;EAEnBC,MAAM,EAAE;AAFW,CAArB;;AAKA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACG,YAAD,CAAlC,CAFa,CAEoC;EAGjD;EACA;;EACA,MAAMM,WAAW,GAAG,YAAY;IAC9B,MAAMC,GAAG,GAAG,iDAAZ;IACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB,CAF8B,CAG9B;IACA;;IACA,MAAM,CAACG,QAAD,IAAa,MAAMF,GAAG,CAACG,IAAJ,EAAzB,CAL8B,CAM9B;IACA;IACA;IACA;;IACAC,OAAO,CAACC,GAAR,CAAYH,QAAZ;EACD,CAXD,CAPa,CAoBb;;;EACAZ,SAAS,CAAC,MAAM;IAEd;IAGA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACAQ,WAAW,GAfG,CAgBd;IACA;EAED,CAnBQ,EAmBN,EAnBM,CAAT,CArBa,CAwCN;EACP;;EAEA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MACE,GAAG,EAAC,2EADN;MAEE,GAAG,EAAC;IAFN;MAAA;MAAA;MAAA;IAAA,QADF,eAKE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALF,eAQE,QAAC,KAAD;MAAO,KAAK,EAAEF;IAAd;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYD;;GAvDQD,G;;KAAAA,G;AAyDT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}